//// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.19;

contract football {
    uint8 public shoot_counter = 0;
    uint8 public round_counter;
    round_winner status = round_winner.MATCH_GOING_ON;
    uint256[30] public randomWords;

    function initialize_array() public{
        randomWords[0] = 52592424;
        randomWords[1] = 896276886;
        randomWords[2] = 761876616;
        randomWords[3] = 664664064;
        randomWords[4] = 676866871;
        randomWords[5] = 52592424;
        randomWords[6] = 896276886;
        randomWords[7] = 761876616;
        randomWords[8] = 664664064;
        randomWords[9] = 676866871;
    }
     //stores the random number in the array

    //structure that stores the details
    struct game_starting_details {
        uint8 player1_level;
        uint8 player2_level;
        string wonToss;
    }

    enum shoot_winner {
        GOALKEEPER,
        STRIKER
    }

    enum round_winner {
        TEAM1,
        TEAM2,
        MATCH_GOING_ON
    }

    enum team_shoot_winner {
        team1,
        team2
    }

    //structure that has shoot details
    struct shoot_detail {
        uint8 shoot_no;
        uint8 team1_lvl; //player is team 1
        uint8 team2_lvl; //computer is team 2
        bool select_interface; //checks if the interface has been selected or not
        uint8 selected_interface; // stores the interface a =1, b = 2, c =3
        bool shoot_completed; //checks if the shoot is completed or not
        shoot_winner Winner_playerType;
        team_shoot_winner ShootWinner_Team;
    }

    //structure that has round details
    struct round_detail {
        uint8 no_of_shoots;
        uint8 team1_score;
        uint8 team2_score;
        bool round_complete;
        round_winner Round_Winner;
    }

    shoot_detail[20] Shoot_Detail;
    round_detail[20] Round_Detail;

    //function that selects which interface to play on
    //return?
    event testi(uint8 shoot_counter, uint8 Team1_Lvl, uint8 Team2_Lvl); //team 1 lvl is goalkeeper level and team 2 levelis striker level

    function interface_Selection(
        uint8 Shoot_No,
        uint8 Team1_Lvl,
        uint8 Team2_Lvl
    ) external returns (uint8) {
        require(shoot_counter == Shoot_No, "Shoot count is not in sync");
        Shoot_Detail[shoot_counter].shoot_no = Shoot_No;
        Shoot_Detail[shoot_counter].team1_lvl = Team1_Lvl;
        Shoot_Detail[shoot_counter].team2_lvl = Team2_Lvl;

        emit testi(Shoot_No, Team1_Lvl, Team2_Lvl);

        // // shoot_detail.shoot_no = 2;

        // //There will be 9 differnt cases if there are three different levels of player cards

        if (Team1_Lvl == 1 && Team2_Lvl == 1) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 2;
        } else if (Team1_Lvl == 1 && Team2_Lvl == 2) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 1;
        } else if (Team1_Lvl == 1 && Team2_Lvl == 3) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 1;
        } else if (Team1_Lvl == 2 && Team2_Lvl == 1) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 3;
        } else if (Team1_Lvl == 2 && Team2_Lvl == 2) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 2;
        } else if (Team1_Lvl == 2 && Team2_Lvl == 3) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 1;
        } else if (Team1_Lvl == 3 && Team2_Lvl == 1) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 3;
            return 3;
        } else if (Team1_Lvl == 3 && Team2_Lvl == 2) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 3;
        } else if (Team1_Lvl == 3 && Team2_Lvl == 3) {
            Shoot_Detail[shoot_counter].select_interface = true;
            Shoot_Detail[shoot_counter].selected_interface = 2;
        }

        return Shoot_Detail[shoot_counter].selected_interface;
        
    }

    //this function will process the random number and check the result
    function penalty_shoot(
        uint8 penalty_interface,
        uint8 user_choice,
        uint8 player_type // provide 1 for goalkeeper and 2 for striker
    ) external {
        require(status == round_winner.MATCH_GOING_ON, "Round is completed");

        //logic for interface 1
        if (penalty_interface == 1 && player_type == 1) {
            require(
                user_choice >= 0 && user_choice <= 1,
                "Invalid choice from player"
            );
            uint256 computer_choice = randomWords[shoot_counter] % 2;
            
            if (user_choice == computer_choice) {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .GOALKEEPER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team1;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                // Round_Detail[round_counter].team1_score += 1;
            } else {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .STRIKER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team2;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                Round_Detail[round_counter].team2_score += 1;
            }
        }

        if (penalty_interface == 1 && player_type == 2) {
            require(
                user_choice >= 0 && user_choice <= 1,
                "Invalid choice from player"
            );
            uint256 computer_choice = randomWords[shoot_counter] % 2;
            if (user_choice == computer_choice) {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .GOALKEEPER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team2;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                // Round_Detail[round_counter].team2_score += 1;
            } else {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .STRIKER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team1;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                Round_Detail[round_counter].team1_score += 1;
            }
        }

        //logic for interface 2
        //add 1 to user choice as indexing starts from 0
        if (penalty_interface == 2 && player_type == 1) {
            require(
                user_choice >= 0 && user_choice <= 3,
                "Invalid choice from player"
            );
            uint256 computer_choice = randomWords[shoot_counter] % 4;
            if (user_choice == computer_choice) {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .GOALKEEPER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team1;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                // Round_Detail[round_counter].team1_score += 1;
            } else {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .STRIKER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team2;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                Round_Detail[round_counter].team2_score += 1;
            }
        }

        if (penalty_interface == 2 && player_type == 2) {
            require(
                user_choice >= 0 && user_choice <= 3,
                "Invalid choice from player"
            );
            uint256 computer_choice = randomWords[shoot_counter] % 4;
            if (user_choice == computer_choice) {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .GOALKEEPER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team2;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                // Round_Detail[round_counter].team2_score += 1;
            } else {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .STRIKER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team1;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                Round_Detail[round_counter].team1_score += 1;
            }
        }

        //logic for interface 3

        if (penalty_interface == 3 && player_type == 1) {
            require(
                user_choice >= 0 && user_choice <= 7,
                "Invalid choice from player"
            );
            uint256 computer_choice = randomWords[shoot_counter] % 8;
            if (user_choice == computer_choice) {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .GOALKEEPER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team1;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                // Round_Detail[round_counter].team1_score += 1;
            } else {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .STRIKER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team2;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                Round_Detail[round_counter].team2_score += 1;
            }
        }

        if (penalty_interface == 3 && player_type == 2) {
            require(
                user_choice >= 0 && user_choice <= 7,
                "Invalid choice from player"
            );
            uint256 computer_choice = randomWords[shoot_counter] % 8;
            if (user_choice == computer_choice) {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .GOALKEEPER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team2;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                // Round_Detail[round_counter].team2_score += 1;
            } else {
                Shoot_Detail[shoot_counter].shoot_completed = true;
                Shoot_Detail[shoot_counter].Winner_playerType = shoot_winner
                    .STRIKER;
                Shoot_Detail[shoot_counter].ShootWinner_Team = team_shoot_winner
                    .team1;

                Round_Detail[round_counter].no_of_shoots = shoot_counter;
                Round_Detail[round_counter].team1_score += 1;
            }
        }
    }

    //this function will check the round result by comparing score
    function round_result_check() external returns (uint8) {
        require(shoot_counter >= 5, "Match can still go on"); // can comment this line later
        if (shoot_counter < 10) {
            uint8 curr_team1 = Round_Detail[round_counter].team1_score;
            uint8 curr_team2 = Round_Detail[round_counter].team2_score;
            uint8 potential_team1;
            uint8 potential_team2;

            if (shoot_counter % 2 == 1) {
                potential_team1 = 5 - ((shoot_counter + 1) / 2) + curr_team1;
                potential_team2 = 5 - ((shoot_counter + 1) / 2) + curr_team2;
            } else {
                potential_team1 = 5 - ((shoot_counter) / 2) - 1 + curr_team1;
                potential_team2 = 5 - ((shoot_counter) / 2) + curr_team2;
            }

            if (curr_team1 > potential_team2) {
                Round_Detail[round_counter].round_complete = true;
                Round_Detail[round_counter].Round_Winner = round_winner.TEAM1;
                status = round_winner.TEAM1;
                return 1; //returning 1 means that team 1 has won(player)
            } else if (curr_team2 > potential_team1) {
                Round_Detail[round_counter].round_complete = true;
                Round_Detail[round_counter].Round_Winner = round_winner.TEAM2;
                status = round_winner.TEAM2;
                return 2; //returning 2 means that team 2 has won(computer)
            } else {
                return 0; //match is still going on
            }
        } else {
            uint8 curr_team1 = Round_Detail[round_counter].team1_score;
            uint8 curr_team2 = Round_Detail[round_counter].team2_score;
            if ((shoot_counter + 1) % 2 == 0) {
                if (curr_team1 > curr_team2) {
                    Round_Detail[round_counter].round_complete = true;
                    Round_Detail[round_counter].Round_Winner = round_winner
                        .TEAM1;
                    status = round_winner.TEAM1;
                    return 1;
                } else if (curr_team1 < curr_team2) {
                    Round_Detail[round_counter].round_complete = true;
                    Round_Detail[round_counter].Round_Winner = round_winner
                        .TEAM2;
                    status = round_winner.TEAM2;
                    return 2;
                } else {
                    return 0;
                }
            }
            else{
                return 0;
            }
        }
    }

    //this function updates the shoot_counter variable. It is done after every penaly shot taken.
    function update_shoot_counter() public {
        shoot_counter++;
    }

    //function that updates the round counter
    function update_round_counter() public {
        round_counter++;
    }

    function reset() public{
        shoot_counter = 0;
        
    }

    function score_team1() external view returns(uint8){
        return Round_Detail[round_counter].team1_score;
    }
    function score_team2() external view returns(uint8){
        return Round_Detail[round_counter].team2_score;
    }
}
